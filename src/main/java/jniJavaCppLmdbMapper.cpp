// Generated by JavaCPP version 1.2: DO NOT EDIT THIS FILE


#ifdef _WIN32
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __declspec(dllexport)
    #define JNIIMPORT __declspec(dllimport)
    #define JNICALL __stdcall

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#elif defined(__GNUC__)
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __attribute__((visibility("default")))
    #define JNIIMPORT
    #define JNICALL

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#endif

#include <jni.h>

#ifdef ANDROID
    #include <android/log.h>
#elif defined(__APPLE__) && defined(__OBJC__)
    #include <TargetConditionals.h>
    #include <Foundation/Foundation.h>
#endif
#if defined(ANDROID) || TARGET_OS_IPHONE
    #define NewWeakGlobalRef(obj) NewGlobalRef(obj)
    #define DeleteWeakGlobalRef(obj) DeleteGlobalRef(obj)
#endif

#include <limits.h>
#include <stddef.h>
#ifndef _WIN32
    #include <stdint.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <exception>
#include <memory>
#include <new>

#if defined(NATIVE_ALLOCATOR) && defined(NATIVE_DEALLOCATOR)
    void* operator new(std::size_t size, const std::nothrow_t&) throw() {
        return NATIVE_ALLOCATOR(size);
    }
    void* operator new[](std::size_t size, const std::nothrow_t&) throw() {
        return NATIVE_ALLOCATOR(size);
    }
    void* operator new(std::size_t size) throw(std::bad_alloc) {
        return NATIVE_ALLOCATOR(size);
    }
    void* operator new[](std::size_t size) throw(std::bad_alloc) {
        return NATIVE_ALLOCATOR(size);
    }
    void operator delete(void* ptr) throw() {
        NATIVE_DEALLOCATOR(ptr);
    }
    void operator delete[](void* ptr) throw() {
        NATIVE_DEALLOCATOR(ptr);
    }
#endif

#define jlong_to_ptr(a) ((void*)(uintptr_t)(a))
#define ptr_to_jlong(a) ((jlong)(uintptr_t)(a))

#if defined(_MSC_VER)
    #define JavaCPP_noinline __declspec(noinline)
    #define JavaCPP_hidden /* hidden by default */
#elif defined(__GNUC__)
    #define JavaCPP_noinline __attribute__((noinline))
    #define JavaCPP_hidden   __attribute__((visibility("hidden")))
#else
    #define JavaCPP_noinline
    #define JavaCPP_hidden
#endif

extern "C" {
#include <lmdb.h>
}

static JavaVM* JavaCPP_vm = NULL;
static bool JavaCPP_haveAllocObject = false;
static bool JavaCPP_haveNonvirtual = false;
static const char* JavaCPP_classNames[28] = {
        "org/bytedeco/javacpp/Pointer",
        "org/bytedeco/javacpp/BytePointer",
        "org/bytedeco/javacpp/ShortPointer",
        "org/bytedeco/javacpp/IntPointer",
        "org/bytedeco/javacpp/LongPointer",
        "org/bytedeco/javacpp/FloatPointer",
        "org/bytedeco/javacpp/DoublePointer",
        "org/bytedeco/javacpp/CharPointer",
        "org/bytedeco/javacpp/PointerPointer",
        "org/bytedeco/javacpp/BoolPointer",
        "org/bytedeco/javacpp/CLongPointer",
        "org/bytedeco/javacpp/SizeTPointer",
        "java/lang/String",
        "org/bytedeco/javacpp/Pointer$NativeDeallocator",
        "org/bytedeco/javacpp/Loader",
        "java/nio/Buffer",
        "java/lang/Object",
        "java/lang/NullPointerException",
        "java/lang/RuntimeException",
        "org/deephacks/lmdbjni/LMDB$MDB_msg_func",
        "org/deephacks/lmdbjni/LMDB$MDB_env",
        "org/deephacks/lmdbjni/LMDB$MDB_assert_func",
        "org/deephacks/lmdbjni/LMDB$MDB_envinfo",
        "org/deephacks/lmdbjni/LMDB$MDB_stat",
        "org/deephacks/lmdbjni/LMDB$MDB_val",
        "org/deephacks/lmdbjni/LMDB$MDB_rel_func",
        "org/deephacks/lmdbjni/LMDB$MDB_cmp_func",
        "org/deephacks/lmdbjni/LMDB$MDB_txn" };
static jclass JavaCPP_classes[28] = { NULL };
static jfieldID JavaCPP_addressFID = NULL;
static jfieldID JavaCPP_positionFID = NULL;
static jfieldID JavaCPP_limitFID = NULL;
static jfieldID JavaCPP_capacityFID = NULL;
static jfieldID JavaCPP_deallocatorFID = NULL;
static jfieldID JavaCPP_ownerAddressFID = NULL;
static jmethodID JavaCPP_initMID = NULL;
static jmethodID JavaCPP_arrayMID = NULL;
static jmethodID JavaCPP_stringMID = NULL;
static jmethodID JavaCPP_getBytesMID = NULL;
static jmethodID JavaCPP_toStringMID = NULL;

static inline void JavaCPP_log(const char* fmt, ...) {
    va_list ap;
    va_start(ap, fmt);
#ifdef ANDROID
    __android_log_vprint(ANDROID_LOG_ERROR, "javacpp", fmt, ap);
#elif defined(__APPLE__) && defined(__OBJC__)
    NSLogv([NSString stringWithUTF8String:fmt], ap);
#else
    vfprintf(stderr, fmt, ap);
    fprintf(stderr, "\n");
#endif
    va_end(ap);
}

static JavaCPP_noinline jclass JavaCPP_getClass(JNIEnv* env, int i) {
    if (JavaCPP_classes[i] == NULL && env->PushLocalFrame(1) == 0) {
        jclass cls = env->FindClass(JavaCPP_classNames[i]);
        if (cls == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error loading class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        JavaCPP_classes[i] = (jclass)env->NewWeakGlobalRef(cls);
        if (JavaCPP_classes[i] == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        env->PopLocalFrame(NULL);
    }
    return JavaCPP_classes[i];
}

static JavaCPP_noinline jfieldID JavaCPP_getFieldID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jfieldID fid = env->GetFieldID(cls, name, sig);
    if (fid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting field ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return fid;
}

static JavaCPP_noinline jmethodID JavaCPP_getMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jmethodID JavaCPP_getStaticMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetStaticMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting static method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jobject JavaCPP_createPointer(JNIEnv* env, int i, jclass cls = NULL) {
    if (cls == NULL && (cls = JavaCPP_getClass(env, i)) == NULL) {
        return NULL;
    }
    if (JavaCPP_haveAllocObject) {
        return env->AllocObject(cls);
    } else {
        jmethodID mid = env->GetMethodID(cls, "<init>", "(Lorg/bytedeco/javacpp/Pointer;)V");
        if (mid == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error getting Pointer constructor of %s, while VM does not support AllocObject()", JavaCPP_classNames[i]);
            return NULL;
        }
        return env->NewObject(cls, mid, NULL);
    }
}

static JavaCPP_noinline void JavaCPP_initPointer(JNIEnv* env, jobject obj, const void* ptr, long long size, void* owner, void (*deallocator)(void*)) {
    if (deallocator != NULL) {
        jvalue args[4];
        args[0].j = ptr_to_jlong(ptr);
        args[1].j = (jlong)size;
        args[2].j = ptr_to_jlong(owner);
        args[3].j = ptr_to_jlong(deallocator);
        if (JavaCPP_haveNonvirtual) {
            env->CallNonvirtualVoidMethodA(obj, JavaCPP_getClass(env, 0), JavaCPP_initMID, args);
        } else {
            env->CallVoidMethodA(obj, JavaCPP_initMID, args);
        }
    } else {
        env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(ptr));
        env->SetLongField(obj, JavaCPP_limitFID, (jlong)size);
        env->SetLongField(obj, JavaCPP_capacityFID, (jlong)size);
    }
}

static JavaCPP_noinline jstring JavaCPP_createString(JNIEnv* env, const char* ptr) {
    if (ptr == NULL) {
        return NULL;
    }
#ifdef MODIFIED_UTF8_STRING
    return env->NewStringUTF(ptr);
#else
    size_t length = strlen(ptr);
    jbyteArray bytes = env->NewByteArray(length < INT_MAX ? length : INT_MAX);
    env->SetByteArrayRegion(bytes, 0, length < INT_MAX ? length : INT_MAX, (signed char*)ptr);
    return (jstring)env->NewObject(JavaCPP_getClass(env, 12), JavaCPP_stringMID, bytes);
#endif
}

static JavaCPP_noinline const char* JavaCPP_getStringBytes(JNIEnv* env, jstring str) {
    if (str == NULL) {
        return NULL;
    }
#ifdef MODIFIED_UTF8_STRING
    return env->GetStringUTFChars(str, NULL);
#else
    jbyteArray bytes = (jbyteArray)env->CallObjectMethod(str, JavaCPP_getBytesMID);
    if (bytes == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting bytes from string.");
        return NULL;
    }
    jsize length = env->GetArrayLength(bytes);
    signed char* ptr = new (std::nothrow) signed char[length + 1];
    if (ptr != NULL) {
        env->GetByteArrayRegion(bytes, 0, length, ptr);
        ptr[length] = 0;
    }
    return (const char*)ptr;
#endif
}

static JavaCPP_noinline void JavaCPP_releaseStringBytes(JNIEnv* env, jstring str, const char* ptr) {
#ifdef MODIFIED_UTF8_STRING
    if (str != NULL) {
        env->ReleaseStringUTFChars(str, ptr);
    }
#else
    delete[] ptr;
#endif
}

class JavaCPP_hidden JavaCPP_exception : public std::exception {
public:
    JavaCPP_exception(const char* str) throw() {
        if (str == NULL) {
            strcpy(msg, "Unknown exception.");
        } else {
            strncpy(msg, str, sizeof(msg));
            msg[sizeof(msg) - 1] = 0;
        }
    }
    virtual const char* what() const throw() { return msg; }
    char msg[1024];
};

#ifndef GENERIC_EXCEPTION_CLASS
#define GENERIC_EXCEPTION_CLASS std::exception
#endif
static JavaCPP_noinline jthrowable JavaCPP_handleException(JNIEnv* env, int i) {
    jstring str = NULL;
    try {
        throw;
    } catch (GENERIC_EXCEPTION_CLASS& e) {
        str = JavaCPP_createString(env, e.what());
    } catch (...) {
        str = JavaCPP_createString(env, "Unknown exception.");
    }
    jmethodID mid = JavaCPP_getMethodID(env, i, "<init>", "(Ljava/lang/String;)V");
    if (mid == NULL) {
        return NULL;
    }
    return (jthrowable)env->NewObject(JavaCPP_getClass(env, i), mid, str);
}

static JavaCPP_noinline void JavaCPP_detach(bool detach) {
    if (detach && JavaCPP_vm->DetachCurrentThread() != JNI_OK) {
        JavaCPP_log("Could not detach the JavaVM from the current thread.");
    }
}

static JavaCPP_noinline bool JavaCPP_getEnv(JNIEnv** env) {
    bool attached = false;
    JavaVM *vm = JavaCPP_vm;
    if (vm == NULL) {
            JavaCPP_log("Could not get any created JavaVM.");
            *env = NULL;
            return false;
    }
    if (vm->GetEnv((void**)env, JNI_VERSION_1_4) != JNI_OK) {
        struct {
            JNIEnv **env;
            operator JNIEnv**() { return env; } // Android JNI
            operator void**() { return (void**)env; } // standard JNI
        } env2 = { env };
        if (vm->AttachCurrentThread(env2, NULL) != JNI_OK) {
            JavaCPP_log("Could not attach the JavaVM to the current thread.");
            *env = NULL;
            return false;
        }
        attached = true;
    }
    if (JavaCPP_vm == NULL) {
        if (JNI_OnLoad(vm, NULL) < 0) {
            JavaCPP_detach(attached);
            *env = NULL;
            return false;
        }
    }
    return attached;
}

struct JavaCPP_hidden JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func {
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func() : ptr(NULL), obj(NULL) { }
    int operator()(const char* arg0, void* arg1);
    int (*ptr)(const char* arg0, void* arg1);
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func::mid = NULL;
struct JavaCPP_hidden JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func {
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func() : ptr(NULL), obj(NULL) { }
    void operator()(::MDB_env* arg0, const char* arg1);
    void (*ptr)(::MDB_env* arg0, const char* arg1);
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func::mid = NULL;
struct JavaCPP_hidden JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func {
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func() : ptr(NULL), obj(NULL) { }
    void operator()(::MDB_val* arg0, void* arg1, void* arg2, void* arg3);
    void (*ptr)(::MDB_val* arg0, void* arg1, void* arg2, void* arg3);
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func::mid = NULL;
struct JavaCPP_hidden JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func {
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func() : ptr(NULL), obj(NULL) { }
    int operator()(const ::MDB_val* arg0, const ::MDB_val* arg1);
    int (*ptr)(const ::MDB_val* arg0, const ::MDB_val* arg1);
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func::mid = NULL;


static JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func_allocate_callback_instance;
static JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func_allocate_callback_instance;
static JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func_allocate_callback_instance;
static JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func_allocate_callback_instance;

static void JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func_deallocate(void *p) { JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef((jweak)((JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func*)p)->obj); delete (JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func*)p; JavaCPP_detach(a); }
static void JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func_deallocate(void *p) { JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef((jweak)((JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func*)p)->obj); delete (JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func*)p; JavaCPP_detach(a); }
static void JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_deallocate(void *p) { delete (::MDB_envinfo*)p; }
static void JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_deallocate(void *p) { delete (::MDB_stat*)p; }
static void JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func_deallocate(void *p) { JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef((jweak)((JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func*)p)->obj); delete (JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func*)p; JavaCPP_detach(a); }
static void JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func_deallocate(void *p) { JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef((jweak)((JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func*)p)->obj); delete (JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func*)p; JavaCPP_detach(a); }
static void JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1val_deallocate(void *p) { delete (::MDB_val*)p; }
static void JavaCPP_org_bytedeco_javacpp_BytePointer_deallocateArray(void* p) { delete[] (signed char*)p; }
static void JavaCPP_org_bytedeco_javacpp_ShortPointer_deallocateArray(void* p) { delete[] (short*)p; }
static void JavaCPP_org_bytedeco_javacpp_IntPointer_deallocateArray(void* p) { delete[] (int*)p; }
static void JavaCPP_org_bytedeco_javacpp_LongPointer_deallocateArray(void* p) { delete[] (jlong*)p; }
static void JavaCPP_org_bytedeco_javacpp_FloatPointer_deallocateArray(void* p) { delete[] (float*)p; }
static void JavaCPP_org_bytedeco_javacpp_DoublePointer_deallocateArray(void* p) { delete[] (double*)p; }
static void JavaCPP_org_bytedeco_javacpp_CharPointer_deallocateArray(void* p) { delete[] (unsigned short*)p; }
static void JavaCPP_org_bytedeco_javacpp_PointerPointer_deallocateArray(void* p) { delete[] (void**)p; }
static void JavaCPP_org_bytedeco_javacpp_BoolPointer_deallocateArray(void* p) { delete[] (bool*)p; }
static void JavaCPP_org_bytedeco_javacpp_CLongPointer_deallocateArray(void* p) { delete[] (long*)p; }
static void JavaCPP_org_bytedeco_javacpp_SizeTPointer_deallocateArray(void* p) { delete[] (size_t*)p; }
static void JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_deallocateArray(void* p) { delete[] (::MDB_envinfo*)p; }
static void JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_deallocateArray(void* p) { delete[] (::MDB_stat*)p; }
static void JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1val_deallocateArray(void* p) { delete[] (::MDB_val*)p; }

extern "C" {

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_4) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_4 inside JNI_OnLoad().");
        return JNI_ERR;
    }
    if (JavaCPP_vm == vm) {
        return env->GetVersion();
    }
    JavaCPP_vm = vm;
    JavaCPP_haveAllocObject = env->functions->AllocObject != NULL;
    JavaCPP_haveNonvirtual = env->functions->CallNonvirtualVoidMethodA != NULL;
    const char* members[28][7] = {
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { "sizeof" },
            { NULL },
            { NULL },
            { NULL },
            { NULL },
            { NULL },
            { NULL },
            { NULL },
            { NULL },
            { NULL },
            { NULL },
            { "sizeof", "me_mapsize", "me_last_pgno", "me_last_txnid", "me_maxreaders", "me_numreaders", "me_mapaddr" },
            { "sizeof", "ms_depth", "ms_branch_pages", "ms_psize", "ms_overflow_pages", "ms_entries", "ms_leaf_pages" },
            { "sizeof", "mv_size", "mv_data" },
            { NULL },
            { NULL },
            { NULL } };
    int offsets[28][7] = {
            { sizeof(void*) },
            { sizeof(signed char) },
            { sizeof(short) },
            { sizeof(int) },
            { sizeof(jlong) },
            { sizeof(float) },
            { sizeof(double) },
            { sizeof(unsigned short) },
            { sizeof(void*) },
            { sizeof(bool) },
            { sizeof(long) },
            { sizeof(size_t) },
            { -1 },
            { -1 },
            { -1 },
            { -1 },
            { -1 },
            { -1 },
            { -1 },
            { -1 },
            { -1 },
            { -1 },
            { sizeof(::MDB_envinfo), offsetof(::MDB_envinfo, me_mapsize), offsetof(::MDB_envinfo, me_last_pgno), offsetof(::MDB_envinfo, me_last_txnid), offsetof(::MDB_envinfo, me_maxreaders), offsetof(::MDB_envinfo, me_numreaders), offsetof(::MDB_envinfo, me_mapaddr) },
            { sizeof(::MDB_stat), offsetof(::MDB_stat, ms_depth), offsetof(::MDB_stat, ms_branch_pages), offsetof(::MDB_stat, ms_psize), offsetof(::MDB_stat, ms_overflow_pages), offsetof(::MDB_stat, ms_entries), offsetof(::MDB_stat, ms_leaf_pages) },
            { sizeof(::MDB_val), offsetof(::MDB_val, mv_size), offsetof(::MDB_val, mv_data) },
            { -1 },
            { -1 },
            { -1 } };
    int memberOffsetSizes[28] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 3, 1, 1, 1 };
    jmethodID putMemberOffsetMID = JavaCPP_getStaticMethodID(env, 14, "putMemberOffset", "(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/Class;");
    if (putMemberOffsetMID == NULL) {
        return JNI_ERR;
    }
    for (int i = 0; i < 28 && !env->ExceptionCheck(); i++) {
        for (int j = 0; j < memberOffsetSizes[i] && !env->ExceptionCheck(); j++) {
            if (env->PushLocalFrame(3) == 0) {
                jvalue args[3];
                args[0].l = env->NewStringUTF(JavaCPP_classNames[i]);
                args[1].l = members[i][j] == NULL ? NULL : env->NewStringUTF(members[i][j]);
                args[2].i = offsets[i][j];
                jclass cls = (jclass)env->CallStaticObjectMethodA(JavaCPP_getClass(env, 14), putMemberOffsetMID, args);
                if (cls == NULL || env->ExceptionCheck()) {
                    JavaCPP_log("Error putting member offsets for class %s.", JavaCPP_classNames[i]);
                    return JNI_ERR;
                }
                JavaCPP_classes[i] = (jclass)env->NewWeakGlobalRef(cls);
                if (JavaCPP_classes[i] == NULL || env->ExceptionCheck()) {
                    JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
                    return JNI_ERR;
                }
                env->PopLocalFrame(NULL);
            }
        }
    }
    JavaCPP_addressFID = JavaCPP_getFieldID(env, 0, "address", "J");
    if (JavaCPP_addressFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_positionFID = JavaCPP_getFieldID(env, 0, "position", "J");
    if (JavaCPP_positionFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_limitFID = JavaCPP_getFieldID(env, 0, "limit", "J");
    if (JavaCPP_limitFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_capacityFID = JavaCPP_getFieldID(env, 0, "capacity", "J");
    if (JavaCPP_capacityFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_deallocatorFID = JavaCPP_getFieldID(env, 0, "deallocator", "Lorg/bytedeco/javacpp/Pointer$Deallocator;");
    if (JavaCPP_deallocatorFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_ownerAddressFID = JavaCPP_getFieldID(env, 13, "ownerAddress", "J");
    if (JavaCPP_ownerAddressFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_initMID = JavaCPP_getMethodID(env, 0, "init", "(JJJJ)V");
    if (JavaCPP_initMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_arrayMID = JavaCPP_getMethodID(env, 15, "array", "()Ljava/lang/Object;");
    if (JavaCPP_arrayMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_stringMID = JavaCPP_getMethodID(env, 12, "<init>", "([B)V");
    if (JavaCPP_stringMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_getBytesMID = JavaCPP_getMethodID(env, 12, "getBytes", "()[B");
    if (JavaCPP_getBytesMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_toStringMID = JavaCPP_getMethodID(env, 16, "toString", "()Ljava/lang/String;");
    if (JavaCPP_toStringMID == NULL) {
        return JNI_ERR;
    }
    return env->GetVersion();
}


JNIEXPORT void JNICALL JNI_OnUnload(JavaVM* vm, void* reserved) {
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_4) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_4 inside JNI_OnUnLoad().");
        return;
    }
    for (int i = 0; i < 28; i++) {
        env->DeleteWeakGlobalRef((jweak)JavaCPP_classes[i]);
        JavaCPP_classes[i] = NULL;
    }
    JavaCPP_vm = NULL;
}


JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_Pointer_00024NativeDeallocator_deallocate(JNIEnv* env, jobject obj, jlong arg0, jlong arg1) {
    void* allocatedAddress = jlong_to_ptr(arg0);
    void (*deallocatorAddress)(void*) = (void(*)(void*))jlong_to_ptr(arg1);
    if (deallocatorAddress != NULL && allocatedAddress != NULL) {
        (*deallocatorAddress)(allocatedAddress);
    }

}



JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_Pointer_asDirectBuffer(JNIEnv* env, jobject obj) {
    char* ptr = (char*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong size = env->GetLongField(obj, JavaCPP_limitFID);
    size -= position;
    jobject rarg = NULL;
    char* rptr;
    rptr = ptr;
    jlong rcapacity = size;
    if (rptr != NULL) {
        jlong rcapacityptr = rcapacity * sizeof(rptr[0]);
        rarg = env->NewDirectByteBuffer((void*)rptr, rcapacityptr < INT_MAX ? rcapacityptr : INT_MAX);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_Pointer_memchr(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    void* rptr;
    rptr = memchr(ptr0, arg1, arg2);
    if (rptr == ptr0) {
        rarg = arg0;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_bytedeco_javacpp_Pointer_memcmp(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = memcmp(ptr0, ptr1, arg2);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_Pointer_memcpy(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    void* rptr;
    rptr = memcpy(ptr0, ptr1, arg2);
    if (rptr == ptr0) {
        rarg = arg0;
    } else if (rptr == ptr1) {
        rarg = arg1;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_Pointer_memmove(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    void* rptr;
    rptr = memmove(ptr0, ptr1, arg2);
    if (rptr == ptr0) {
        rarg = arg0;
    } else if (rptr == ptr1) {
        rarg = arg1;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_Pointer_memset(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jlong arg2) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    void* rptr;
    rptr = memset(ptr0, arg1, arg2);
    if (rptr == ptr0) {
        rarg = arg0;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_Pointer_allocate(JNIEnv* env, jobject obj, jobject arg0) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)env->GetDirectBufferAddress(arg0);
    void* rptr = ptr0;
    jlong rcapacity = 1;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, NULL);
}

JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_BytePointer_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    signed char* rptr = new (std::nothrow) signed char[arg0];
    jlong rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_bytedeco_javacpp_BytePointer_deallocateArray);
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_strcat(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)strcat((char*)ptr0, (char*)ptr1);
    if (rptr == (char*)ptr0) {
        rarg = arg0;
    } else if (rptr == (char*)ptr1) {
        rarg = arg1;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 1);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_strchr(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)strchr((char*)ptr0, arg1);
    if (rptr == (char*)ptr0) {
        rarg = arg0;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 1);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_bytedeco_javacpp_BytePointer_strcmp(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = strcmp((char*)ptr0, (char*)ptr1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_bytedeco_javacpp_BytePointer_strcoll(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = strcoll((char*)ptr0, (char*)ptr1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_strcpy(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)strcpy((char*)ptr0, (char*)ptr1);
    if (rptr == (char*)ptr0) {
        rarg = arg0;
    } else if (rptr == (char*)ptr1) {
        rarg = arg1;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 1);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_bytedeco_javacpp_BytePointer_strcspn(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jlong rarg = 0;
    size_t rvalue = (size_t)strcspn((char*)ptr0, (char*)ptr1);
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_strerror(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)strerror(arg0);
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 1);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_bytedeco_javacpp_BytePointer_strlen(JNIEnv* env, jclass cls, jobject arg0) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jlong rarg = 0;
    size_t rvalue = (size_t)strlen((char*)ptr0);
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_strncat(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)strncat((char*)ptr0, (char*)ptr1, (size_t)arg2);
    if (rptr == (char*)ptr0) {
        rarg = arg0;
    } else if (rptr == (char*)ptr1) {
        rarg = arg1;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 1);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_bytedeco_javacpp_BytePointer_strncmp(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = strncmp((char*)ptr0, (char*)ptr1, (size_t)arg2);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_strncpy(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)strncpy((char*)ptr0, (char*)ptr1, (size_t)arg2);
    if (rptr == (char*)ptr0) {
        rarg = arg0;
    } else if (rptr == (char*)ptr1) {
        rarg = arg1;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 1);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_strpbrk(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)strpbrk((char*)ptr0, (char*)ptr1);
    if (rptr == (char*)ptr0) {
        rarg = arg0;
    } else if (rptr == (char*)ptr1) {
        rarg = arg1;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 1);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_strrchr(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)strrchr((char*)ptr0, arg1);
    if (rptr == (char*)ptr0) {
        rarg = arg0;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 1);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_bytedeco_javacpp_BytePointer_strspn(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jlong rarg = 0;
    size_t rvalue = (size_t)strspn((char*)ptr0, (char*)ptr1);
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_strstr(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)strstr((char*)ptr0, (char*)ptr1);
    if (rptr == (char*)ptr0) {
        rarg = arg0;
    } else if (rptr == (char*)ptr1) {
        rarg = arg1;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 1);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_strtok(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)strtok((char*)ptr0, (char*)ptr1);
    if (rptr == (char*)ptr0) {
        rarg = arg0;
    } else if (rptr == (char*)ptr1) {
        rarg = arg1;
    } else if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 1);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_bytedeco_javacpp_BytePointer_strxfrm(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jlong rarg = 0;
    size_t rvalue = (size_t)strxfrm((char*)ptr0, (char*)ptr1, (size_t)arg2);
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_get___3BII(JNIEnv* env, jobject obj, jbyteArray arg0, jint arg1, jint arg2) {
    signed char* ptr = (signed char*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (jbyte*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr0 + arg1, ptr, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jbyte JNICALL Java_org_bytedeco_javacpp_BytePointer_get__J(JNIEnv* env, jobject obj, jlong arg0) {
    signed char* ptr = (signed char*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jbyte rarg = 0;
    signed char rvalue = ptr[arg0];
    rarg = (jbyte)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_put__JB(JNIEnv* env, jobject obj, jlong arg0, jbyte arg1) {
    signed char* ptr = (signed char*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = arg1;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BytePointer_put___3BII(JNIEnv* env, jobject obj, jbyteArray arg0, jint arg1, jint arg2) {
    signed char* ptr = (signed char*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (jbyte*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr, ptr0 + arg1, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}

JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_ShortPointer_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    short* rptr = new (std::nothrow) short[arg0];
    jlong rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_bytedeco_javacpp_ShortPointer_deallocateArray);
}
JNIEXPORT jshort JNICALL Java_org_bytedeco_javacpp_ShortPointer_get__J(JNIEnv* env, jobject obj, jlong arg0) {
    short* ptr = (short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jshort rarg = 0;
    short rvalue = ptr[arg0];
    rarg = (jshort)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_ShortPointer_get___3SII(JNIEnv* env, jobject obj, jshortArray arg0, jint arg1, jint arg2) {
    short* ptr = (short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    short* ptr0 = arg0 == NULL ? NULL : (jshort*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr0 + arg1, ptr, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_ShortPointer_put___3SII(JNIEnv* env, jobject obj, jshortArray arg0, jint arg1, jint arg2) {
    short* ptr = (short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    short* ptr0 = arg0 == NULL ? NULL : (jshort*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr, ptr0 + arg1, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_ShortPointer_put__JS(JNIEnv* env, jobject obj, jlong arg0, jshort arg1) {
    short* ptr = (short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = arg1;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_IntPointer_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    int* rptr = new (std::nothrow) int[arg0];
    jlong rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_bytedeco_javacpp_IntPointer_deallocateArray);
}
JNIEXPORT jint JNICALL Java_org_bytedeco_javacpp_IntPointer_get__J(JNIEnv* env, jobject obj, jlong arg0) {
    int* ptr = (int*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rvalue = ptr[arg0];
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_IntPointer_get___3III(JNIEnv* env, jobject obj, jintArray arg0, jint arg1, jint arg2) {
    int* ptr = (int*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    int* ptr0 = arg0 == NULL ? NULL : (jint*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr0 + arg1, ptr, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_IntPointer_put___3III(JNIEnv* env, jobject obj, jintArray arg0, jint arg1, jint arg2) {
    int* ptr = (int*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    int* ptr0 = arg0 == NULL ? NULL : (jint*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr, ptr0 + arg1, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_IntPointer_put__JI(JNIEnv* env, jobject obj, jlong arg0, jint arg1) {
    int* ptr = (int*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = arg1;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_LongPointer_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jlong* rptr = new (std::nothrow) jlong[arg0];
    jlong rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_bytedeco_javacpp_LongPointer_deallocateArray);
}
JNIEXPORT jlong JNICALL Java_org_bytedeco_javacpp_LongPointer_get__J(JNIEnv* env, jobject obj, jlong arg0) {
    jlong* ptr = (jlong*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jlong rvalue = ptr[arg0];
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_LongPointer_get___3JII(JNIEnv* env, jobject obj, jlongArray arg0, jint arg1, jint arg2) {
    jlong* ptr = (jlong*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong* ptr0 = arg0 == NULL ? NULL : (jlong*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr0 + arg1, ptr, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_LongPointer_put___3JII(JNIEnv* env, jobject obj, jlongArray arg0, jint arg1, jint arg2) {
    jlong* ptr = (jlong*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong* ptr0 = arg0 == NULL ? NULL : (jlong*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr, ptr0 + arg1, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_LongPointer_put__JJ(JNIEnv* env, jobject obj, jlong arg0, jlong arg1) {
    jlong* ptr = (jlong*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = arg1;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_FloatPointer_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    float* rptr = new (std::nothrow) float[arg0];
    jlong rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_bytedeco_javacpp_FloatPointer_deallocateArray);
}
JNIEXPORT jfloat JNICALL Java_org_bytedeco_javacpp_FloatPointer_get__J(JNIEnv* env, jobject obj, jlong arg0) {
    float* ptr = (float*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jfloat rarg = 0;
    float rvalue = ptr[arg0];
    rarg = (jfloat)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_FloatPointer_get___3FII(JNIEnv* env, jobject obj, jfloatArray arg0, jint arg1, jint arg2) {
    float* ptr = (float*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    float* ptr0 = arg0 == NULL ? NULL : (jfloat*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr0 + arg1, ptr, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_FloatPointer_put___3FII(JNIEnv* env, jobject obj, jfloatArray arg0, jint arg1, jint arg2) {
    float* ptr = (float*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    float* ptr0 = arg0 == NULL ? NULL : (jfloat*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr, ptr0 + arg1, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_FloatPointer_put__JF(JNIEnv* env, jobject obj, jlong arg0, jfloat arg1) {
    float* ptr = (float*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = arg1;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_DoublePointer_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    double* rptr = new (std::nothrow) double[arg0];
    jlong rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_bytedeco_javacpp_DoublePointer_deallocateArray);
}
JNIEXPORT jdouble JNICALL Java_org_bytedeco_javacpp_DoublePointer_get__J(JNIEnv* env, jobject obj, jlong arg0) {
    double* ptr = (double*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jdouble rarg = 0;
    double rvalue = ptr[arg0];
    rarg = (jdouble)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_DoublePointer_get___3DII(JNIEnv* env, jobject obj, jdoubleArray arg0, jint arg1, jint arg2) {
    double* ptr = (double*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    double* ptr0 = arg0 == NULL ? NULL : (jdouble*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr0 + arg1, ptr, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_DoublePointer_put___3DII(JNIEnv* env, jobject obj, jdoubleArray arg0, jint arg1, jint arg2) {
    double* ptr = (double*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    double* ptr0 = arg0 == NULL ? NULL : (jdouble*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr, ptr0 + arg1, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_DoublePointer_put__JD(JNIEnv* env, jobject obj, jlong arg0, jdouble arg1) {
    double* ptr = (double*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = arg1;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_CharPointer_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    unsigned short* rptr = new (std::nothrow) unsigned short[arg0];
    jlong rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_bytedeco_javacpp_CharPointer_deallocateArray);
}
JNIEXPORT jchar JNICALL Java_org_bytedeco_javacpp_CharPointer_get__J(JNIEnv* env, jobject obj, jlong arg0) {
    unsigned short* ptr = (unsigned short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jchar rarg = 0;
    unsigned short rvalue = ptr[arg0];
    rarg = (jchar)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_CharPointer_get___3CII(JNIEnv* env, jobject obj, jcharArray arg0, jint arg1, jint arg2) {
    unsigned short* ptr = (unsigned short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    unsigned short* ptr0 = arg0 == NULL ? NULL : (jchar*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr0 + arg1, ptr, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_CharPointer_put___3CII(JNIEnv* env, jobject obj, jcharArray arg0, jint arg1, jint arg2) {
    unsigned short* ptr = (unsigned short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    unsigned short* ptr0 = arg0 == NULL ? NULL : (jchar*)env->GetPrimitiveArrayCritical(arg0, NULL);
    jobject rarg = obj;
    memcpy(ptr, ptr0 + arg1, arg2 * sizeof(*ptr0));
    if (arg0 != NULL) env->ReleasePrimitiveArrayCritical(arg0, ptr0, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_CharPointer_put__JC(JNIEnv* env, jobject obj, jlong arg0, jchar arg1) {
    unsigned short* ptr = (unsigned short*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = arg1;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_PointerPointer_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    void** rptr = new (std::nothrow) void*[arg0];
    jlong rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_bytedeco_javacpp_PointerPointer_deallocateArray);
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_PointerPointer_get(JNIEnv* env, jobject obj, jclass arg0, jlong arg1) {
    void** ptr = (void**)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    void* rptr;
    rptr = ptr[arg1];
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0, arg0);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_PointerPointer_put(JNIEnv* env, jobject obj, jlong arg0, jobject arg1) {
    void** ptr = (void**)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = obj;
    ptr[arg0] = ptr1;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_BoolPointer_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    bool* rptr = new (std::nothrow) bool[arg0];
    jlong rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_bytedeco_javacpp_BoolPointer_deallocateArray);
}
JNIEXPORT jboolean JNICALL Java_org_bytedeco_javacpp_BoolPointer_get(JNIEnv* env, jobject obj, jlong arg0) {
    bool* ptr = (bool*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rvalue = (bool)ptr[arg0];
    rarg = (jboolean)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_BoolPointer_put(JNIEnv* env, jobject obj, jlong arg0, jboolean arg1) {
    bool* ptr = (bool*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = (bool)arg1;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_CLongPointer_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    long* rptr = new (std::nothrow) long[arg0];
    jlong rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_bytedeco_javacpp_CLongPointer_deallocateArray);
}
JNIEXPORT jlong JNICALL Java_org_bytedeco_javacpp_CLongPointer_get(JNIEnv* env, jobject obj, jlong arg0) {
    long* ptr = (long*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    long rvalue = (long)ptr[arg0];
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_CLongPointer_put(JNIEnv* env, jobject obj, jlong arg0, jlong arg1) {
    long* ptr = (long*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = (long)arg1;
    return rarg;
}

JNIEXPORT void JNICALL Java_org_bytedeco_javacpp_SizeTPointer_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    size_t* rptr = new (std::nothrow) size_t[arg0];
    jlong rcapacity = arg0;
    JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_bytedeco_javacpp_SizeTPointer_deallocateArray);
}
JNIEXPORT jlong JNICALL Java_org_bytedeco_javacpp_SizeTPointer_get(JNIEnv* env, jobject obj, jlong arg0) {
    size_t* ptr = (size_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    size_t rvalue = (size_t)ptr[arg0];
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_bytedeco_javacpp_SizeTPointer_put(JNIEnv* env, jobject obj, jlong arg0, jlong arg1) {
    size_t* ptr = (size_t*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr[arg0] = (size_t)arg1;
    return rarg;
}


JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func_call(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func* ptr = (JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    if (ptr->ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This function pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (*ptr->ptr)((const char*)ptr0, ptr1);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 18);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT int JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func_allocate_callback(const char* arg0, void* arg1) {
    return JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func_allocate_callback_instance(arg0, arg1);
}
int JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func::operator()(const char* arg0, void* arg1) {
    jint rarg = 0;
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[2];
    jobject obj0 = NULL;
    signed char* ptr0 = NULL;
    ptr0 = (signed char*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 1);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    jobject obj1 = NULL;
    void* ptr1 = NULL;
    ptr1 = (void*)arg1;
    if (ptr1 != NULL) { 
        obj1 = JavaCPP_createPointer(env, 0);
    }
    if (obj1 != NULL) { 
        env->SetLongField(obj1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    }
    args[1].l = obj1;
    if (obj == NULL) {
        obj = JavaCPP_createPointer(env, 19);
        obj = obj == NULL ? NULL : env->NewGlobalRef(obj);
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of org.deephacks.lmdbjni.LMDB.MDB_msg_func instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        ptr = &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func_allocate_callback;
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 19, "call", "(Lorg/bytedeco/javacpp/BytePointer;Lorg/bytedeco/javacpp/Pointer;)I");
    }
    if (env->IsSameObject(obj, NULL)) {
        JavaCPP_log("Function pointer object is NULL in callback for org.deephacks.lmdbjni.LMDB.MDB_msg_func.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"public native int org.deephacks.lmdbjni.LMDB$MDB_msg_func.call(org.bytedeco.javacpp.BytePointer,org.bytedeco.javacpp.Pointer)\" for callback.");
    } else {
        rarg = env->CallIntMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
    env->DeleteLocalRef(obj1);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = JavaCPP_getStringBytes(env, str);
        JavaCPP_exception e(msg);
        JavaCPP_releaseStringBytes(env, str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of org.deephacks.lmdbjni.LMDB.MDB_msg_func instance for callback.");
        return;
    }
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func* rptr = new (std::nothrow) JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func;
    if (rptr != NULL) {
        rptr->ptr = &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func_allocate_callback;
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, rptr, &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func_deallocate);
        JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func_allocate_callback_instance = *rptr;
    }
}

JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func_call(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func* ptr = (JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return;
    }
    if (ptr->ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This function pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        (*ptr->ptr)(ptr0, (const char*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 18);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func_allocate_callback(::MDB_env* arg0, const char* arg1) {
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func_allocate_callback_instance(arg0, arg1);
}
void JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func::operator()(::MDB_env* arg0, const char* arg1) {
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[2];
    jobject obj0 = NULL;
    ::MDB_env* ptr0 = NULL;
    ptr0 = (::MDB_env*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 20);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    jobject obj1 = NULL;
    signed char* ptr1 = NULL;
    ptr1 = (signed char*)arg1;
    if (ptr1 != NULL) { 
        obj1 = JavaCPP_createPointer(env, 1);
    }
    if (obj1 != NULL) { 
        env->SetLongField(obj1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    }
    args[1].l = obj1;
    if (obj == NULL) {
        obj = JavaCPP_createPointer(env, 21);
        obj = obj == NULL ? NULL : env->NewGlobalRef(obj);
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of org.deephacks.lmdbjni.LMDB.MDB_assert_func instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        ptr = &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func_allocate_callback;
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 21, "call", "(Lorg/deephacks/lmdbjni/LMDB$MDB_env;Lorg/bytedeco/javacpp/BytePointer;)V");
    }
    if (env->IsSameObject(obj, NULL)) {
        JavaCPP_log("Function pointer object is NULL in callback for org.deephacks.lmdbjni.LMDB.MDB_assert_func.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"public native void org.deephacks.lmdbjni.LMDB$MDB_assert_func.call(org.deephacks.lmdbjni.LMDB$MDB_env,org.bytedeco.javacpp.BytePointer)\" for callback.");
    } else {
        env->CallVoidMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
    env->DeleteLocalRef(obj1);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = JavaCPP_getStringBytes(env, str);
        JavaCPP_exception e(msg);
        JavaCPP_releaseStringBytes(env, str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
}
JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of org.deephacks.lmdbjni.LMDB.MDB_assert_func instance for callback.");
        return;
    }
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func* rptr = new (std::nothrow) JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func;
    if (rptr != NULL) {
        rptr->ptr = &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func_allocate_callback;
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, rptr, &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func_deallocate);
        JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func_allocate_callback_instance = *rptr;
    }
}

JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_me_1mapsize__J(JNIEnv* env, jobject obj, jlong arg0) {
    ::MDB_envinfo* ptr = (::MDB_envinfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->me_mapsize = (size_t)arg0;
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_me_1mapsize__(JNIEnv* env, jobject obj) {
    ::MDB_envinfo* ptr = (::MDB_envinfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    size_t rvalue = (size_t)ptr->me_mapsize;
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::MDB_envinfo* rptr = new ::MDB_envinfo[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 18);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jlong JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_me_1last_1pgno__(JNIEnv* env, jobject obj) {
    ::MDB_envinfo* ptr = (::MDB_envinfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    size_t rvalue = (size_t)ptr->me_last_pgno;
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_me_1last_1pgno__J(JNIEnv* env, jobject obj, jlong arg0) {
    ::MDB_envinfo* ptr = (::MDB_envinfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->me_last_pgno = (size_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_me_1last_1txnid__J(JNIEnv* env, jobject obj, jlong arg0) {
    ::MDB_envinfo* ptr = (::MDB_envinfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->me_last_txnid = (size_t)arg0;
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_me_1last_1txnid__(JNIEnv* env, jobject obj) {
    ::MDB_envinfo* ptr = (::MDB_envinfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    size_t rvalue = (size_t)ptr->me_last_txnid;
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_me_1maxreaders__I(JNIEnv* env, jobject obj, jint arg0) {
    ::MDB_envinfo* ptr = (::MDB_envinfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->me_maxreaders = (unsigned int)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_me_1maxreaders__(JNIEnv* env, jobject obj) {
    ::MDB_envinfo* ptr = (::MDB_envinfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    unsigned int rvalue = (unsigned int)ptr->me_maxreaders;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_me_1numreaders__I(JNIEnv* env, jobject obj, jint arg0) {
    ::MDB_envinfo* ptr = (::MDB_envinfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->me_numreaders = (unsigned int)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_me_1numreaders__(JNIEnv* env, jobject obj) {
    ::MDB_envinfo* ptr = (::MDB_envinfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    unsigned int rvalue = (unsigned int)ptr->me_numreaders;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_me_1mapaddr__(JNIEnv* env, jobject obj) {
    ::MDB_envinfo* ptr = (::MDB_envinfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    void* rptr;
    rptr = ptr->me_mapaddr;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_me_1mapaddr__Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::MDB_envinfo* ptr = (::MDB_envinfo*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->me_mapaddr = ptr0;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::MDB_envinfo* rptr = new ::MDB_envinfo();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1envinfo_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 18);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_ms_1depth__(JNIEnv* env, jobject obj) {
    ::MDB_stat* ptr = (::MDB_stat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    unsigned int rvalue = (unsigned int)ptr->ms_depth;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_ms_1depth__I(JNIEnv* env, jobject obj, jint arg0) {
    ::MDB_stat* ptr = (::MDB_stat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->ms_depth = (unsigned int)arg0;
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_ms_1branch_1pages__(JNIEnv* env, jobject obj) {
    ::MDB_stat* ptr = (::MDB_stat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    size_t rvalue = (size_t)ptr->ms_branch_pages;
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_ms_1branch_1pages__J(JNIEnv* env, jobject obj, jlong arg0) {
    ::MDB_stat* ptr = (::MDB_stat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->ms_branch_pages = (size_t)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_ms_1psize__I(JNIEnv* env, jobject obj, jint arg0) {
    ::MDB_stat* ptr = (::MDB_stat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->ms_psize = (unsigned int)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_ms_1psize__(JNIEnv* env, jobject obj) {
    ::MDB_stat* ptr = (::MDB_stat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    unsigned int rvalue = (unsigned int)ptr->ms_psize;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::MDB_stat* rptr = new ::MDB_stat[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 18);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_ms_1overflow_1pages__J(JNIEnv* env, jobject obj, jlong arg0) {
    ::MDB_stat* ptr = (::MDB_stat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->ms_overflow_pages = (size_t)arg0;
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_ms_1overflow_1pages__(JNIEnv* env, jobject obj) {
    ::MDB_stat* ptr = (::MDB_stat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    size_t rvalue = (size_t)ptr->ms_overflow_pages;
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_ms_1entries__J(JNIEnv* env, jobject obj, jlong arg0) {
    ::MDB_stat* ptr = (::MDB_stat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->ms_entries = (size_t)arg0;
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_ms_1entries__(JNIEnv* env, jobject obj) {
    ::MDB_stat* ptr = (::MDB_stat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    size_t rvalue = (size_t)ptr->ms_entries;
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_ms_1leaf_1pages__J(JNIEnv* env, jobject obj, jlong arg0) {
    ::MDB_stat* ptr = (::MDB_stat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->ms_leaf_pages = (size_t)arg0;
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_ms_1leaf_1pages__(JNIEnv* env, jobject obj) {
    ::MDB_stat* ptr = (::MDB_stat*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    size_t rvalue = (size_t)ptr->ms_leaf_pages;
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::MDB_stat* rptr = new ::MDB_stat();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1stat_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 18);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func_call(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func* ptr = (JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return;
    }
    if (ptr->ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This function pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::MDB_val* ptr0 = arg0 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    char* ptr2 = arg2 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    char* ptr3 = arg3 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        (*ptr->ptr)(ptr0, ptr1, ptr2, ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 18);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func_allocate_callback(::MDB_val* arg0, void* arg1, void* arg2, void* arg3) {
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func_allocate_callback_instance(arg0, arg1, arg2, arg3);
}
void JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func::operator()(::MDB_val* arg0, void* arg1, void* arg2, void* arg3) {
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[4];
    jobject obj0 = NULL;
    ::MDB_val* ptr0 = NULL;
    ptr0 = (::MDB_val*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 24);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    jobject obj1 = NULL;
    void* ptr1 = NULL;
    ptr1 = (void*)arg1;
    if (ptr1 != NULL) { 
        obj1 = JavaCPP_createPointer(env, 0);
    }
    if (obj1 != NULL) { 
        env->SetLongField(obj1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    }
    args[1].l = obj1;
    jobject obj2 = NULL;
    void* ptr2 = NULL;
    ptr2 = (void*)arg2;
    if (ptr2 != NULL) { 
        obj2 = JavaCPP_createPointer(env, 0);
    }
    if (obj2 != NULL) { 
        env->SetLongField(obj2, JavaCPP_addressFID, ptr_to_jlong(ptr2));
    }
    args[2].l = obj2;
    jobject obj3 = NULL;
    void* ptr3 = NULL;
    ptr3 = (void*)arg3;
    if (ptr3 != NULL) { 
        obj3 = JavaCPP_createPointer(env, 0);
    }
    if (obj3 != NULL) { 
        env->SetLongField(obj3, JavaCPP_addressFID, ptr_to_jlong(ptr3));
    }
    args[3].l = obj3;
    if (obj == NULL) {
        obj = JavaCPP_createPointer(env, 25);
        obj = obj == NULL ? NULL : env->NewGlobalRef(obj);
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of org.deephacks.lmdbjni.LMDB.MDB_rel_func instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        ptr = &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func_allocate_callback;
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 25, "call", "(Lorg/deephacks/lmdbjni/LMDB$MDB_val;Lorg/bytedeco/javacpp/Pointer;Lorg/bytedeco/javacpp/Pointer;Lorg/bytedeco/javacpp/Pointer;)V");
    }
    if (env->IsSameObject(obj, NULL)) {
        JavaCPP_log("Function pointer object is NULL in callback for org.deephacks.lmdbjni.LMDB.MDB_rel_func.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"public native void org.deephacks.lmdbjni.LMDB$MDB_rel_func.call(org.deephacks.lmdbjni.LMDB$MDB_val,org.bytedeco.javacpp.Pointer,org.bytedeco.javacpp.Pointer,org.bytedeco.javacpp.Pointer)\" for callback.");
    } else {
        env->CallVoidMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
    env->DeleteLocalRef(obj1);
    env->DeleteLocalRef(obj2);
    env->DeleteLocalRef(obj3);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = JavaCPP_getStringBytes(env, str);
        JavaCPP_exception e(msg);
        JavaCPP_releaseStringBytes(env, str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
}
JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of org.deephacks.lmdbjni.LMDB.MDB_rel_func instance for callback.");
        return;
    }
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func* rptr = new (std::nothrow) JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func;
    if (rptr != NULL) {
        rptr->ptr = &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func_allocate_callback;
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, rptr, &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func_deallocate);
        JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func_allocate_callback_instance = *rptr;
    }
}

JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func_call(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func* ptr = (JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    if (ptr->ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This function pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::MDB_val* ptr0 = arg0 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    ::MDB_val* ptr1 = arg1 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rvalue = (*ptr->ptr)((const ::MDB_val*)ptr0, (const ::MDB_val*)ptr1);
        rarg = (jint)rvalue;
    } catch (...) {
        exc = JavaCPP_handleException(env, 18);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT int JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func_allocate_callback(const ::MDB_val* arg0, const ::MDB_val* arg1) {
    return JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func_allocate_callback_instance(arg0, arg1);
}
int JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func::operator()(const ::MDB_val* arg0, const ::MDB_val* arg1) {
    jint rarg = 0;
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[2];
    jobject obj0 = NULL;
    ::MDB_val* ptr0 = NULL;
    ptr0 = (::MDB_val*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 24);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    jobject obj1 = NULL;
    ::MDB_val* ptr1 = NULL;
    ptr1 = (::MDB_val*)arg1;
    if (ptr1 != NULL) { 
        obj1 = JavaCPP_createPointer(env, 24);
    }
    if (obj1 != NULL) { 
        env->SetLongField(obj1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    }
    args[1].l = obj1;
    if (obj == NULL) {
        obj = JavaCPP_createPointer(env, 26);
        obj = obj == NULL ? NULL : env->NewGlobalRef(obj);
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of org.deephacks.lmdbjni.LMDB.MDB_cmp_func instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        ptr = &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func_allocate_callback;
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 26, "call", "(Lorg/deephacks/lmdbjni/LMDB$MDB_val;Lorg/deephacks/lmdbjni/LMDB$MDB_val;)I");
    }
    if (env->IsSameObject(obj, NULL)) {
        JavaCPP_log("Function pointer object is NULL in callback for org.deephacks.lmdbjni.LMDB.MDB_cmp_func.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"public native int org.deephacks.lmdbjni.LMDB$MDB_cmp_func.call(org.deephacks.lmdbjni.LMDB$MDB_val,org.deephacks.lmdbjni.LMDB$MDB_val)\" for callback.");
    } else {
        rarg = env->CallIntMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
    env->DeleteLocalRef(obj1);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = JavaCPP_getStringBytes(env, str);
        JavaCPP_exception e(msg);
        JavaCPP_releaseStringBytes(env, str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of org.deephacks.lmdbjni.LMDB.MDB_cmp_func instance for callback.");
        return;
    }
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func* rptr = new (std::nothrow) JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func;
    if (rptr != NULL) {
        rptr->ptr = &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func_allocate_callback;
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, rptr, &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func_deallocate);
        JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func_allocate_callback_instance = *rptr;
    }
}

JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1val_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::MDB_val* rptr = new ::MDB_val[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1val_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 18);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1val_mv_1size__J(JNIEnv* env, jobject obj, jlong arg0) {
    ::MDB_val* ptr = (::MDB_val*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->mv_size = (size_t)arg0;
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1val_mv_1size__(JNIEnv* env, jobject obj) {
    ::MDB_val* ptr = (::MDB_val*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    size_t rvalue = (size_t)ptr->mv_size;
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1val_mv_1data__(JNIEnv* env, jobject obj) {
    ::MDB_val* ptr = (::MDB_val*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    void* rptr;
    rptr = ptr->mv_data;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1val_mv_1data__Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::MDB_val* ptr = (::MDB_val*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 17), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->mv_data = ptr0;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_00024MDB_1val_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::MDB_val* rptr = new ::MDB_val();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1val_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 18);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}




JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1version__Lorg_bytedeco_javacpp_IntPointer_2Lorg_bytedeco_javacpp_IntPointer_2Lorg_bytedeco_javacpp_IntPointer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    int* ptr0 = arg0 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    int* ptr1 = arg1 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    int* ptr2 = arg2 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)mdb_version(ptr0, ptr1, ptr2);
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 1);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jbyteArray JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1version___3I_3I_3I(JNIEnv* env, jclass cls, jintArray arg0, jintArray arg1, jintArray arg2) {
    int* ptr0 = arg0 == NULL ? NULL : env->GetIntArrayElements(arg0, NULL);
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    int* ptr2 = arg2 == NULL ? NULL : env->GetIntArrayElements(arg2, NULL);
    jbyteArray rarg = NULL;
    char* rptr;
    rptr = (char*)mdb_version(ptr0, ptr1, ptr2);
    jlong rcapacity = rptr != NULL ? 1 : 0;
    if (rptr != NULL) {
        rarg = env->NewByteArray(rcapacity < INT_MAX ? rcapacity : INT_MAX);
        env->SetByteArrayRegion(rarg, 0, rcapacity < INT_MAX ? rcapacity : INT_MAX, (jbyte*)rptr);
    }
    if (arg0 != NULL) env->ReleaseIntArrayElements(arg0, (jint*)ptr0, 0);
    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    if (arg2 != NULL) env->ReleaseIntArrayElements(arg2, (jint*)ptr2, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1version__Ljava_nio_IntBuffer_2Ljava_nio_IntBuffer_2Ljava_nio_IntBuffer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    int* ptr0 = arg0 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg0);
    jintArray arr0 = NULL;
    if (arg0 != NULL && ptr0 == NULL) {
        arr0 = (jintArray)env->CallObjectMethod(arg0, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr0 = arr0 == NULL ? NULL : env->GetIntArrayElements(arr0, NULL);
        }
    }
    int* ptr1 = arg1 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg1);
    jintArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jintArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetIntArrayElements(arr1, NULL);
        }
    }
    int* ptr2 = arg2 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg2);
    jintArray arr2 = NULL;
    if (arg2 != NULL && ptr2 == NULL) {
        arr2 = (jintArray)env->CallObjectMethod(arg2, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr2 = arr2 == NULL ? NULL : env->GetIntArrayElements(arr2, NULL);
        }
    }
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)mdb_version(ptr0, ptr1, ptr2);
    jlong rcapacity = rptr != NULL ? 1 : 0;
    if (rptr != NULL) {
        jlong rcapacityptr = rcapacity * sizeof(rptr[0]);
        rarg = env->NewDirectByteBuffer((void*)rptr, rcapacityptr < INT_MAX ? rcapacityptr : INT_MAX);
    }
    if (arr0 != NULL) env->ReleaseIntArrayElements(arr0, (jint*)ptr0, 0);
    if (arr1 != NULL) env->ReleaseIntArrayElements(arr1, (jint*)ptr1, 0);
    if (arr2 != NULL) env->ReleaseIntArrayElements(arr2, (jint*)ptr2, 0);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1strerror(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    char* rptr;
    rptr = (char*)mdb_strerror(arg0);
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 1);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1create__Lorg_bytedeco_javacpp_PointerPointer_2(JNIEnv* env, jclass cls, jobject arg0) {
    void** ptr0 = arg0 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jint rarg = 0;
    int rvalue = mdb_env_create((MDB_env**)ptr0);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1create__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2(JNIEnv* env, jclass cls, jobject arg0) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_env_create((arg0 == NULL ? NULL : &ptr0));
    rarg = (jint)rvalue;
    if (arg0 != NULL) env->SetLongField(arg0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1open__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Ljava_lang_String_2II(JNIEnv* env, jclass cls, jobject arg0, jstring arg1, jint arg2, jint arg3) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    jint rarg = 0;
    int rvalue = mdb_env_open(ptr0, ptr1, (unsigned int)arg2, (mdb_mode_t)arg3);
    rarg = (jint)rvalue;
    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1open__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Lorg_bytedeco_javacpp_BytePointer_2II(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2, jint arg3) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = mdb_env_open(ptr0, (const char*)ptr1, (unsigned int)arg2, (mdb_mode_t)arg3);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1copy__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = mdb_env_copy(ptr0, (const char*)ptr1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1copy__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Ljava_lang_String_2(JNIEnv* env, jclass cls, jobject arg0, jstring arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    jint rarg = 0;
    int rvalue = mdb_env_copy(ptr0, ptr1);
    rarg = (jint)rvalue;
    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1copyfd(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_env_copyfd(ptr0, (mdb_filehandle_t)arg1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1copy2__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Lorg_bytedeco_javacpp_BytePointer_2I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = mdb_env_copy2(ptr0, (const char*)ptr1, (unsigned int)arg2);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1copy2__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Ljava_lang_String_2I(JNIEnv* env, jclass cls, jobject arg0, jstring arg1, jint arg2) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    jint rarg = 0;
    int rvalue = mdb_env_copy2(ptr0, ptr1, (unsigned int)arg2);
    rarg = (jint)rvalue;
    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1copyfd2(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jint arg2) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_env_copyfd2(ptr0, (mdb_filehandle_t)arg1, (unsigned int)arg2);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1stat(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::MDB_stat* ptr1 = arg1 == NULL ? NULL : (::MDB_stat*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = mdb_env_stat(ptr0, ptr1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1info(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::MDB_envinfo* ptr1 = arg1 == NULL ? NULL : (::MDB_envinfo*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = mdb_env_info(ptr0, ptr1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1sync(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_env_sync(ptr0, arg1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1close(JNIEnv* env, jclass cls, jobject arg0) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    mdb_env_close(ptr0);
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1set_1flags(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jint arg2) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_env_set_flags(ptr0, (unsigned int)arg1, arg2);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1flags__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2_3I(JNIEnv* env, jclass cls, jobject arg0, jintArray arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    jint rarg = 0;
    int rvalue = mdb_env_get_flags(ptr0, (unsigned int*)ptr1);
    rarg = (jint)rvalue;
    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1flags__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Lorg_bytedeco_javacpp_IntPointer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr1 = arg1 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = mdb_env_get_flags(ptr0, (unsigned int*)ptr1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1flags__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Ljava_nio_IntBuffer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr1 = arg1 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg1);
    jintArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jintArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetIntArrayElements(arr1, NULL);
        }
    }
    jint rarg = 0;
    int rvalue = mdb_env_get_flags(ptr0, (unsigned int*)ptr1);
    rarg = (jint)rvalue;
    if (arr1 != NULL) env->ReleaseIntArrayElements(arr1, (jint*)ptr1, 0);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1path__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Lorg_bytedeco_javacpp_PointerPointer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    void** ptr1 = arg1 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = mdb_env_get_path(ptr0, (const char**)ptr1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1path__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = mdb_env_get_path(ptr0, (const char**)(arg1 == NULL ? NULL : &ptr1));
    rarg = (jint)rvalue;
    ptr1 -= position1;
    if (arg1 != NULL) env->SetLongField(arg1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1path__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2_3B(JNIEnv* env, jclass cls, jobject arg0, jbyteArray arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : env->GetByteArrayElements(arg1, NULL);
    jint rarg = 0;
    int rvalue = mdb_env_get_path(ptr0, (const char**)(arg1 == NULL ? NULL : &ptr1));
    rarg = (jint)rvalue;
    if (arg1 != NULL) env->ReleaseByteArrayElements(arg1, (jbyte*)ptr1, JNI_ABORT);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1path__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Ljava_nio_ByteBuffer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL);
        }
    }
    jint rarg = 0;
    int rvalue = mdb_env_get_path(ptr0, (const char**)(arg1 == NULL ? NULL : &ptr1));
    rarg = (jint)rvalue;
    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)ptr1, JNI_ABORT);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1fd__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2_3I(JNIEnv* env, jclass cls, jobject arg0, jintArray arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    jint rarg = 0;
    int rvalue = mdb_env_get_fd(ptr0, (mdb_filehandle_t*)ptr1);
    rarg = (jint)rvalue;
    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1fd__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Lorg_bytedeco_javacpp_IntPointer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr1 = arg1 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = mdb_env_get_fd(ptr0, (mdb_filehandle_t*)ptr1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1fd__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Ljava_nio_IntBuffer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr1 = arg1 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg1);
    jintArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jintArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetIntArrayElements(arr1, NULL);
        }
    }
    jint rarg = 0;
    int rvalue = mdb_env_get_fd(ptr0, (mdb_filehandle_t*)ptr1);
    rarg = (jint)rvalue;
    if (arr1 != NULL) env->ReleaseIntArrayElements(arr1, (jint*)ptr1, 0);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1set_1mapsize(JNIEnv* env, jclass cls, jobject arg0, jlong arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_env_set_mapsize(ptr0, (size_t)arg1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1set_1maxreaders(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_env_set_maxreaders(ptr0, (unsigned int)arg1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1maxreaders__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Lorg_bytedeco_javacpp_IntPointer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr1 = arg1 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = mdb_env_get_maxreaders(ptr0, (unsigned int*)ptr1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1maxreaders__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Ljava_nio_IntBuffer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr1 = arg1 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg1);
    jintArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jintArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetIntArrayElements(arr1, NULL);
        }
    }
    jint rarg = 0;
    int rvalue = mdb_env_get_maxreaders(ptr0, (unsigned int*)ptr1);
    rarg = (jint)rvalue;
    if (arr1 != NULL) env->ReleaseIntArrayElements(arr1, (jint*)ptr1, 0);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1maxreaders__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2_3I(JNIEnv* env, jclass cls, jobject arg0, jintArray arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    jint rarg = 0;
    int rvalue = mdb_env_get_maxreaders(ptr0, (unsigned int*)ptr1);
    rarg = (jint)rvalue;
    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1set_1maxdbs(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_env_set_maxdbs(ptr0, (MDB_dbi)arg1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1maxkeysize(JNIEnv* env, jclass cls, jobject arg0) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_env_get_maxkeysize(ptr0);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1set_1userctx(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = mdb_env_set_userctx(ptr0, ptr1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1get_1userctx(JNIEnv* env, jclass cls, jobject arg0) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    void* rptr;
    rptr = mdb_env_get_userctx(ptr0);
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1env_1set_1assert(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func* ptr1 = arg1 == NULL ? NULL : (JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1assert_1func*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = mdb_env_set_assert(ptr0, (ptr1 == NULL ? NULL : ptr1->ptr));
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1txn_1begin__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Lorg_deephacks_lmdbjni_LMDB_00024MDB_1txn_2ILorg_bytedeco_javacpp_PointerPointer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2, jobject arg3) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::MDB_txn* ptr1 = arg1 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    void** ptr3 = arg3 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    int rvalue = mdb_txn_begin(ptr0, ptr1, (unsigned int)arg2, (MDB_txn**)ptr3);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1txn_1begin__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Lorg_deephacks_lmdbjni_LMDB_00024MDB_1txn_2ILorg_deephacks_lmdbjni_LMDB_00024MDB_1txn_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2, jobject arg3) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::MDB_txn* ptr1 = arg1 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    ::MDB_txn* ptr3 = arg3 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_txn_begin(ptr0, ptr1, (unsigned int)arg2, (arg3 == NULL ? NULL : &ptr3));
    rarg = (jint)rvalue;
    if (arg3 != NULL) env->SetLongField(arg3, JavaCPP_addressFID, ptr_to_jlong(ptr3));
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1txn_1env(JNIEnv* env, jclass cls, jobject arg0) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    ::MDB_env* rptr;
    rptr = mdb_txn_env(ptr0);
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 20);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1txn_1id(JNIEnv* env, jclass cls, jobject arg0) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong rarg = 0;
    size_t rvalue = (size_t)mdb_txn_id(ptr0);
    rarg = (jlong)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1txn_1commit(JNIEnv* env, jclass cls, jobject arg0) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_txn_commit(ptr0);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1txn_1abort(JNIEnv* env, jclass cls, jobject arg0) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    mdb_txn_abort(ptr0);
}
JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1txn_1reset(JNIEnv* env, jclass cls, jobject arg0) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    mdb_txn_reset(ptr0);
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1txn_1renew(JNIEnv* env, jclass cls, jobject arg0) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_txn_renew(ptr0);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1dbi_1open__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1txn_2Lorg_bytedeco_javacpp_BytePointer_2I_3I(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2, jintArray arg3) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    int* ptr3 = arg3 == NULL ? NULL : env->GetIntArrayElements(arg3, NULL);
    jint rarg = 0;
    int rvalue = mdb_dbi_open(ptr0, (const char*)ptr1, (unsigned int)arg2, (MDB_dbi*)ptr3);
    rarg = (jint)rvalue;
    if (arg3 != NULL) env->ReleaseIntArrayElements(arg3, (jint*)ptr3, 0);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1dbi_1open__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1txn_2Ljava_lang_String_2ILorg_bytedeco_javacpp_IntPointer_2(JNIEnv* env, jclass cls, jobject arg0, jstring arg1, jint arg2, jobject arg3) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    int* ptr3 = arg3 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    int rvalue = mdb_dbi_open(ptr0, ptr1, (unsigned int)arg2, (MDB_dbi*)ptr3);
    rarg = (jint)rvalue;
    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1dbi_1open__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1txn_2Ljava_lang_String_2I_3I(JNIEnv* env, jclass cls, jobject arg0, jstring arg1, jint arg2, jintArray arg3) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    int* ptr3 = arg3 == NULL ? NULL : env->GetIntArrayElements(arg3, NULL);
    jint rarg = 0;
    int rvalue = mdb_dbi_open(ptr0, ptr1, (unsigned int)arg2, (MDB_dbi*)ptr3);
    rarg = (jint)rvalue;
    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    if (arg3 != NULL) env->ReleaseIntArrayElements(arg3, (jint*)ptr3, 0);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1dbi_1open__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1txn_2Lorg_bytedeco_javacpp_BytePointer_2ILjava_nio_IntBuffer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2, jobject arg3) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    int* ptr3 = arg3 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg3);
    jintArray arr3 = NULL;
    if (arg3 != NULL && ptr3 == NULL) {
        arr3 = (jintArray)env->CallObjectMethod(arg3, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr3 = arr3 == NULL ? NULL : env->GetIntArrayElements(arr3, NULL);
        }
    }
    jint rarg = 0;
    int rvalue = mdb_dbi_open(ptr0, (const char*)ptr1, (unsigned int)arg2, (MDB_dbi*)ptr3);
    rarg = (jint)rvalue;
    if (arr3 != NULL) env->ReleaseIntArrayElements(arr3, (jint*)ptr3, 0);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1dbi_1open__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1txn_2Ljava_lang_String_2ILjava_nio_IntBuffer_2(JNIEnv* env, jclass cls, jobject arg0, jstring arg1, jint arg2, jobject arg3) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    int* ptr3 = arg3 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg3);
    jintArray arr3 = NULL;
    if (arg3 != NULL && ptr3 == NULL) {
        arr3 = (jintArray)env->CallObjectMethod(arg3, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr3 = arr3 == NULL ? NULL : env->GetIntArrayElements(arr3, NULL);
        }
    }
    jint rarg = 0;
    int rvalue = mdb_dbi_open(ptr0, ptr1, (unsigned int)arg2, (MDB_dbi*)ptr3);
    rarg = (jint)rvalue;
    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    if (arr3 != NULL) env->ReleaseIntArrayElements(arr3, (jint*)ptr3, 0);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1dbi_1open__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1txn_2Lorg_bytedeco_javacpp_BytePointer_2ILorg_bytedeco_javacpp_IntPointer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2, jobject arg3) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    int* ptr3 = arg3 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    int rvalue = mdb_dbi_open(ptr0, (const char*)ptr1, (unsigned int)arg2, (MDB_dbi*)ptr3);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1stat(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::MDB_stat* ptr2 = arg2 == NULL ? NULL : (::MDB_stat*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jint rarg = 0;
    int rvalue = mdb_stat(ptr0, (MDB_dbi)arg1, ptr2);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1dbi_1flags__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1txn_2ILjava_nio_IntBuffer_2(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr2 = arg2 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg2);
    jintArray arr2 = NULL;
    if (arg2 != NULL && ptr2 == NULL) {
        arr2 = (jintArray)env->CallObjectMethod(arg2, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr2 = arr2 == NULL ? NULL : env->GetIntArrayElements(arr2, NULL);
        }
    }
    jint rarg = 0;
    int rvalue = mdb_dbi_flags(ptr0, (MDB_dbi)arg1, (unsigned int*)ptr2);
    rarg = (jint)rvalue;
    if (arr2 != NULL) env->ReleaseIntArrayElements(arr2, (jint*)ptr2, 0);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1dbi_1flags__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1txn_2ILorg_bytedeco_javacpp_IntPointer_2(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr2 = arg2 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jint rarg = 0;
    int rvalue = mdb_dbi_flags(ptr0, (MDB_dbi)arg1, (unsigned int*)ptr2);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1dbi_1flags__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1txn_2I_3I(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jintArray arg2) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr2 = arg2 == NULL ? NULL : env->GetIntArrayElements(arg2, NULL);
    jint rarg = 0;
    int rvalue = mdb_dbi_flags(ptr0, (MDB_dbi)arg1, (unsigned int*)ptr2);
    rarg = (jint)rvalue;
    if (arg2 != NULL) env->ReleaseIntArrayElements(arg2, (jint*)ptr2, 0);
    return rarg;
}
JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1dbi_1close(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    mdb_dbi_close(ptr0, (MDB_dbi)arg1);
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_MDB_1VERSION_1FULL(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rvalue = MDB_VERSION_FULL;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_MDB_1VERSION_1STRING(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rvalue = MDB_VERSION_STRING;
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1drop(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jint arg2) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_drop(ptr0, (MDB_dbi)arg1, arg2);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1set_1compare(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func* ptr2 = arg2 == NULL ? NULL : (JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jint rarg = 0;
    int rvalue = mdb_set_compare(ptr0, (MDB_dbi)arg1, (ptr2 == NULL ? NULL : ptr2->ptr));
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1set_1dupsort(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func* ptr2 = arg2 == NULL ? NULL : (JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1cmp_1func*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jint rarg = 0;
    int rvalue = mdb_set_dupsort(ptr0, (MDB_dbi)arg1, (ptr2 == NULL ? NULL : ptr2->ptr));
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1set_1relfunc(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func* ptr2 = arg2 == NULL ? NULL : (JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1rel_1func*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jint rarg = 0;
    int rvalue = mdb_set_relfunc(ptr0, (MDB_dbi)arg1, (ptr2 == NULL ? NULL : ptr2->ptr));
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1set_1relctx(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    char* ptr2 = arg2 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jint rarg = 0;
    int rvalue = mdb_set_relctx(ptr0, (MDB_dbi)arg1, ptr2);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1get(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2, jobject arg3) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::MDB_val* ptr2 = arg2 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::MDB_val* ptr3 = arg3 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    int rvalue = mdb_get(ptr0, (MDB_dbi)arg1, ptr2, ptr3);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1put(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2, jobject arg3, jint arg4) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::MDB_val* ptr2 = arg2 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::MDB_val* ptr3 = arg3 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    int rvalue = mdb_put(ptr0, (MDB_dbi)arg1, ptr2, ptr3, (unsigned int)arg4);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1del(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2, jobject arg3) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::MDB_val* ptr2 = arg2 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::MDB_val* ptr3 = arg3 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    int rvalue = mdb_del(ptr0, (MDB_dbi)arg1, ptr2, ptr3);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1cursor_1open__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1txn_2ILorg_deephacks_lmdbjni_LMDB_00024MDB_1cursor_2(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::MDB_cursor* ptr2 = arg2 == NULL ? NULL : (::MDB_cursor*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_cursor_open(ptr0, (MDB_dbi)arg1, (arg2 == NULL ? NULL : &ptr2));
    rarg = (jint)rvalue;
    if (arg2 != NULL) env->SetLongField(arg2, JavaCPP_addressFID, ptr_to_jlong(ptr2));
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1cursor_1open__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1txn_2ILorg_bytedeco_javacpp_PointerPointer_2(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    void** ptr2 = arg2 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jint rarg = 0;
    int rvalue = mdb_cursor_open(ptr0, (MDB_dbi)arg1, (MDB_cursor**)ptr2);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT void JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1cursor_1close(JNIEnv* env, jclass cls, jobject arg0) {
    ::MDB_cursor* ptr0 = arg0 == NULL ? NULL : (::MDB_cursor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    mdb_cursor_close(ptr0);
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1cursor_1renew(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::MDB_cursor* ptr1 = arg1 == NULL ? NULL : (::MDB_cursor*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_cursor_renew(ptr0, ptr1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1cursor_1txn(JNIEnv* env, jclass cls, jobject arg0) {
    ::MDB_cursor* ptr0 = arg0 == NULL ? NULL : (::MDB_cursor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    ::MDB_txn* rptr;
    rptr = mdb_cursor_txn(ptr0);
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 27);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1cursor_1dbi(JNIEnv* env, jclass cls, jobject arg0) {
    ::MDB_cursor* ptr0 = arg0 == NULL ? NULL : (::MDB_cursor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    MDB_dbi rvalue = (MDB_dbi)mdb_cursor_dbi(ptr0);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1cursor_1get(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jint arg3) {
    ::MDB_cursor* ptr0 = arg0 == NULL ? NULL : (::MDB_cursor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::MDB_val* ptr1 = arg1 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    ::MDB_val* ptr2 = arg2 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jint rarg = 0;
    int rvalue = mdb_cursor_get(ptr0, ptr1, ptr2, (MDB_cursor_op)arg3);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1cursor_1put(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2, jint arg3) {
    ::MDB_cursor* ptr0 = arg0 == NULL ? NULL : (::MDB_cursor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::MDB_val* ptr1 = arg1 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    ::MDB_val* ptr2 = arg2 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jint rarg = 0;
    int rvalue = mdb_cursor_put(ptr0, ptr1, ptr2, (unsigned int)arg3);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1cursor_1del(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    ::MDB_cursor* ptr0 = arg0 == NULL ? NULL : (::MDB_cursor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    int rvalue = mdb_cursor_del(ptr0, (unsigned int)arg1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1cursor_1count(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_cursor* ptr0 = arg0 == NULL ? NULL : (::MDB_cursor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    size_t* ptr1 = arg1 == NULL ? NULL : (size_t*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = mdb_cursor_count(ptr0, (size_t*)ptr1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1cmp(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2, jobject arg3) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::MDB_val* ptr2 = arg2 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::MDB_val* ptr3 = arg3 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    int rvalue = mdb_cmp(ptr0, (MDB_dbi)arg1, (const ::MDB_val*)ptr2, (const ::MDB_val*)ptr3);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1dcmp(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2, jobject arg3) {
    ::MDB_txn* ptr0 = arg0 == NULL ? NULL : (::MDB_txn*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::MDB_val* ptr2 = arg2 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::MDB_val* ptr3 = arg3 == NULL ? NULL : (::MDB_val*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jint rarg = 0;
    int rvalue = mdb_dcmp(ptr0, (MDB_dbi)arg1, (const ::MDB_val*)ptr2, (const ::MDB_val*)ptr3);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1reader_1list(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func* ptr1 = arg1 == NULL ? NULL : (JavaCPP_org_deephacks_lmdbjni_LMDB_00024MDB_1msg_1func*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    char* ptr2 = arg2 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jint rarg = 0;
    int rvalue = mdb_reader_list(ptr0, (ptr1 == NULL ? NULL : ptr1->ptr), ptr2);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1reader_1check__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Lorg_bytedeco_javacpp_IntPointer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr1 = arg1 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jint rarg = 0;
    int rvalue = mdb_reader_check(ptr0, ptr1);
    rarg = (jint)rvalue;
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1reader_1check__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2Ljava_nio_IntBuffer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr1 = arg1 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg1);
    jintArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jintArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetIntArrayElements(arr1, NULL);
        }
    }
    jint rarg = 0;
    int rvalue = mdb_reader_check(ptr0, ptr1);
    rarg = (jint)rvalue;
    if (arr1 != NULL) env->ReleaseIntArrayElements(arr1, (jint*)ptr1, 0);
    return rarg;
}
JNIEXPORT jint JNICALL Java_org_deephacks_lmdbjni_LMDB_mdb_1reader_1check__Lorg_deephacks_lmdbjni_LMDB_00024MDB_1env_2_3I(JNIEnv* env, jclass cls, jobject arg0, jintArray arg1) {
    ::MDB_env* ptr0 = arg0 == NULL ? NULL : (::MDB_env*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    jint rarg = 0;
    int rvalue = mdb_reader_check(ptr0, ptr1);
    rarg = (jint)rvalue;
    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    return rarg;
}

}

